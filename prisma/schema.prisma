generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// https://next-auth.js.org/adapters/models#account
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// https://next-auth.js.org/adapters/models#session
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// https://next-auth.js.org/adapters/models#user
model User {
    id            String      @id @default(cuid())
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    firstName     String?
    familyName    String?
    accounts      Account[]
    sessions      Session[]
    UserAsset     UserAsset[]
}

// https://next-auth.js.org/adapters/models#verification-token
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

/// Asset Type
/// Currently there are 2 types of assets
enum AssetType {
    CASH
    CRYPTO
    // STOCK
}

// This concept describe a unique entity of asset. Cash, BTC, Apple Stock etc.
// This is a unique entity that can be bought and sold.
/// Asset Entity
/// Example: USD, BTC, ETH
model AssetEntity {
    id             Int         @id @default(autoincrement())
    name           String      @unique /// For Bitcoin, it would be Bitcoin
    symbol         String      @unique /// For Bitcoin, this would be BTC
    assetType      AssetType
    PortfolioAsset UserAsset[]
    Price          Price[]
}

/// UserAsset
/// If a user has 5k Cash, 1 BTC and 1000 Apple Stock, then there would be 3 PortfolioAsset records
model UserAsset {
    id            Int     @id @default(autoincrement())
    assetEntityId Int
    quantity      Float
    userId        String?

    assetEntity AssetEntity @relation(fields: [assetEntityId], references: [id])
    User        User?       @relation(fields: [userId], references: [id])

    @@index([userId])
}

/// Price
/// This is the price of an asset at a given time
model Price {
    id            Int      @id @default(autoincrement())
    assetEntityId Int
    price         Float
    timestamp     DateTime /// this should be the datetime when the scheduler was run

    assetEntity AssetEntity @relation(fields: [assetEntityId], references: [id])

    @@index([assetEntityId, timestamp])
}
